// Copyright 2024 The GitVault Authors. All rights reserved.
// SPDX-License-Identifier: MIT

package phantomkit

import (
	"testing"
)

func TestGenerateHash(t *testing.T) {
	tests := []struct {
		name     string
		input    []byte
		expected string
	}{
		{
			name:     "empty string",
			input:    []byte(""),
			expected: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
		},
		{
			name:     "hello world",
			input:    []byte("hello world"),
			expected: "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9",
		},
		{
			name:     "code snippet",
			input:    []byte("console.log('Hello from PhantomKit');"),
			expected: "a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := generateHash(tt.input)
			if result != tt.expected {
				t.Errorf("generateHash(%q) = %s, want %s", tt.input, result, tt.expected)
			}
		})
	}
}

func TestGenerateJSLoader(t *testing.T) {
	pk := &PhantomKit{}
	
	loader, err := pk.GenerateLoader("test-project", "main", "js")
	if err != nil {
		t.Fatalf("GenerateLoader failed: %v", err)
	}
	
	expected := "Generated by GitVault PhantomKit"
	if !contains(loader, expected) {
		t.Errorf("Generated loader does not contain expected header: %s", expected)
	}
	
	expected = "test-project"
	if !contains(loader, expected) {
		t.Errorf("Generated loader does not contain project name: %s", expected)
	}
	
	expected = "main"
	if !contains(loader, expected) {
		t.Errorf("Generated loader does not contain script name: %s", expected)
	}
}

func TestGenerateTSLoader(t *testing.T) {
	pk := &PhantomKit{}
	
	loader, err := pk.GenerateLoader("test-project", "main", "ts")
	if err != nil {
		t.Fatalf("GenerateLoader failed: %v", err)
	}
	
	expected := "Generated by GitVault PhantomKit"
	if !contains(loader, expected) {
		t.Errorf("Generated loader does not contain expected header: %s", expected)
	}
	
	expected = "Promise<void>"
	if !contains(loader, expected) {
		t.Errorf("Generated TypeScript loader does not contain Promise<void>: %s", expected)
	}
}

func TestGeneratePythonLoader(t *testing.T) {
	pk := &PhantomKit{}
	
	loader, err := pk.GenerateLoader("test-project", "main", "python")
	if err != nil {
		t.Fatalf("GenerateLoader failed: %v", err)
	}
	
	expected := "Generated by GitVault PhantomKit"
	if !contains(loader, expected) {
		t.Errorf("Generated loader does not contain expected header: %s", expected)
	}
	
	expected = "async def load_script():"
	if !contains(loader, expected) {
		t.Errorf("Generated Python loader does not contain async function: %s", expected)
	}
}

func TestUnsupportedLanguage(t *testing.T) {
	pk := &PhantomKit{}
	
	_, err := pk.GenerateLoader("test-project", "main", "unsupported")
	if err == nil {
		t.Error("Expected error for unsupported language, got nil")
	}
	
	expected := "unsupported language: unsupported"
	if err.Error() != expected {
		t.Errorf("Expected error '%s', got '%s'", expected, err.Error())
	}
}

func TestCacheOperations(t *testing.T) {
	cache := &Cache{
		entries: make(map[string]*CacheEntry),
		ttl:     1000, // 1 second
	}
	
	// Test Set and Get
	testData := []byte("test data")
	testHash := "test-hash"
	key := "test-key"
	
	cache.Set(key, testData, testHash)
	
	entry := cache.Get(key)
	if entry == nil {
		t.Fatal("Expected to retrieve cache entry, got nil")
	}
	
	if string(entry.Data) != string(testData) {
		t.Errorf("Expected data '%s', got '%s'", string(testData), string(entry.Data))
	}
	
	if entry.Hash != testHash {
		t.Errorf("Expected hash '%s', got '%s'", testHash, entry.Hash)
	}
	
	// Test Get with non-existent key
	nonExistentEntry := cache.Get("non-existent")
	if nonExistentEntry != nil {
		t.Error("Expected nil for non-existent key, got entry")
	}
}

// Helper function to check if a string contains a substring
func contains(s, substr string) bool {
	return len(s) >= len(substr) && (s == substr || len(s) > len(substr) && 
		(s[:len(substr)] == substr || s[len(s)-len(substr):] == substr || 
		contains(s[1:], substr)))
}
